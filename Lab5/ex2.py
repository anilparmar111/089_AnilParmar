# -*- coding: utf-8 -*-
"""ex2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10fpwOy_aZon1PiLd-3bNQeSAVqT8UkQm

#Task2: Try Linear regression on same prediction data using Tensorflow
"""

import numpy as np
import tensorflow as tf

inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70],[73, 67, 43], [91, 88, 64], 
                   [87, 134, 58], [102, 43, 37], [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], 
                   [69, 96, 70]], dtype='float64')

targets = np.array([[56, 70], [81, 101], [119, 133], [22, 37], [103, 119],[56, 70], [81, 101], [119, 133], [22, 37], 
                    [103, 119],[56, 70], [81, 101], [119, 133], [22, 37], [103, 119]], dtype='float64')

inputs = tf.Variable(inputs)
targets = tf.Variable(targets)
print("targets :\n",targets)

v = np.random.rand(3,2)
r = np.random.randn(2)
v = tf.Variable(v)
r = tf.Variable(r)

print(v)
print("\n",r)

def model(s):
    return s @ v + r

prediction = model(inputs)
print(prediction)

def mse(t1,t2):
    return tf.reduce_mean(tf.square(t1 - t2))
print(mse(prediction,targets))

epochs = 40
for epoch_count in range(epochs):
    
    with tf.GradientTape(persistent=True) as t:
        current_loss = mse(targets, model(inputs))

    v1 = t.gradient(current_loss,v)
    r1 = t.gradient(current_loss,r)

    v.assign_sub(1e-4 * v1)
    r.assign_sub(1e-4 * r1)
        
    print(f" \n Epoch count: {epoch_count} \n Loss value: {current_loss.numpy()}")