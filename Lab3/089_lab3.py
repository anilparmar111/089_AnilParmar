# -*- coding: utf-8 -*-
"""089_Lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R4HAFcKxwnWvMLZUW9CEHUglLzmRcX6K
"""

from google.colab import drive
drive.mount('/content/drive')

"""Task 1 :- Try the algo on Dataset2 - OneHotEncoding of features : and train test division 75% - 25%."""

import numpy as np
import pandas as pd
from sklearn import datasets, preprocessing
from sklearn.naive_bayes import GaussianNB, MultinomialNB

dataset = pd.read_csv('Dataset2.csv',index_col=[0])

label_encoder = preprocessing.LabelEncoder()
yrows = None
for data_heading in dataset:
  # print(data_heading)
  if (data_heading != 'Class') :
    print(f'\n\nHeading  :-  {data_heading}')
    dummy = pd.get_dummies(dataset[data_heading])
    dataset = dataset.drop([data_heading], axis = 1)
    dataset = pd.concat([dataset, dummy], axis = 1)
  else:
    yrows = label_encoder.fit_transform(dataset[data_heading])
    dataset = dataset.drop([data_heading], axis = 1)

print(dataset, yrows)

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(dataset, yrows, test_size = 0.25, random_state = 90)

model = MultinomialNB()
model.fit(xtrain, ytrain)

y_predicted = model.predict(xtest)
print(xtest)
print('\n', y_predicted)

from sklearn import metrics
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

print(f'Accuracy is  :-  {metrics.accuracy_score(ytest, y_predicted)}')

#precision and recall
precision = precision_score(ytest, y_predicted)
recall = recall_score(ytest, y_predicted)
print(f'Precision  :-  {precision}')
print(f'Recall  :-  {recall}')

#Task1

#Outlook(O, R, S) = Rainy, Temp(C, H, M) = Mild, Humidity(high, low, normal) = Normal, Wind(F, T) = False
output = model.predict([[0,1,0, 0,0,1, 0,0,1, 1,0]])
print('Prediction  :-   ', output)

#Sunny, Cool, High, True
output = model.predict([[0,0,1, 1,0,0, 1,0,0, 0,1]])
print('Prediction  :-  ', output)

"""Task 2 :- Apply algorithm on wine dataset - LabelEncoding of features: and train test division 80% - 20% ."""

from sklearn import preprocessing
from sklearn.naive_bayes import GaussianNB
from sklearn.datasets import load_wine

wine_data = load_wine()
print('Features : \n', wine_data.feature_names)
print('\nLabels : \n', wine_data.target_names)
wine_data.data.shape

from sklearn.model_selection import train_test_split

data_train, data_test, target_train, target_test = train_test_split(wine_data.data, wine_data.target, test_size = 0.20, random_state = 90)

import numpy as np
gnb = GaussianNB()

gnb.fit(data_train, target_train)   #train the model using training sets
target_prediction = gnb.predict(data_test)  #predict the response of test dataset

from sklearn import metrics

print('Accuracy of model  :  ', metrics.accuracy_score(target_test, target_prediction))

from sklearn.metrics import confusion_matrix
confusion_matrix(target_test, target_prediction)

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

precision = precision_score(target_test, target_prediction, average = None)
recall = recall_score(target_test, target_prediction, average = None)

print('Precision  :  {}'.format(precision))
print('\n\nRecall  :  {}'.format(recall))