# -*- coding: utf-8 -*-
"""089_Lab4_ClassifyingWine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b4o9wU13Nnb7W_K7RKiLZISstAMisUK-

Task 2: Apply algorithm on digits dataset - LabelEncoding of features: and Train test Division 80%-20%

---
"""

#Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score
from subprocess import call

data = datasets.load_wine()
dataset = pd.DataFrame(data.data, columns = data.feature_names)
print(f'Examples : {dataset.shape[0]}  and  Features : {dataset.shape[1]}')

print(dataset.head())
print('\n\nFeatures  :  ', data.feature_names)
print('\nLabels  :  ', np.unique(data.target_names))

x_train, x_test, y_train, y_test = train_test_split(data.data, data.target, test_size = 0.20, random_state = 89)

dtc = DecisionTreeClassifier(criterion = 'entropy', max_leaf_nodes = 10)
dtc.fit(x_train, y_train)

#Testing

y_pred = dtc.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
print('Accuracy Score  :  ', accuracy)

conf_matrix = confusion_matrix  (y_test, y_pred)
print('\nConfusion matrix  :  \n', conf_matrix)

precision = precision_score(y_test, y_pred, average = None)
print('\nPrecision Score  :  ', precision)

recall  = recall_score(y_test, y_pred, average = None)
print('\nRecall Score  :  ', recall)

export_graphviz(dtc, out_file = 'wine_tree.dot', 
                feature_names = list(data.feature_names), 
                class_names = list(data.target_names), 
                filled = True)  

# Convert to png
call(['dot', '-Tpng', 'wine_tree.dot', '-o', 'wine_tree.png', '-Gdpi=600'])
plt.figure(figsize = (15, 20))
plt.imshow(plt.imread('wine_tree.png'))
plt.axis('off')
plt.show()