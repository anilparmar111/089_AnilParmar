# -*- coding: utf-8 -*-
"""089_Lab4_ClassifyingDigits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OpxJoHYdgRNlerioQs7ZK6MlrgDY2YAY

Task 2: Apply algorithm on digits dataset - LabelEncoding of features: and Train test Division 80%-20%

---
"""

from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import numpy as np

#loading dataset
digits = datasets.load_digits()
print(digits)

print(digits.data.shape)
print(digits.target.shape)

from sklearn.model_selection import train_test_split

x = digits.data
y = digits.target

#splitting data into train and test sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 89)

#creating a decision tree classifier using gini
classifier = DecisionTreeClassifier(criterion = 'gini', random_state = 90, max_depth = 7, min_samples_leaf = 26)
classifier.fit(x_train, y_train)

#predicting classes of test data
y_pred = classifier.predict(x_test)
print('Predicted values  :  \n')
print(y_pred)

#model accuracy
from sklearn import metrics
print('Confusion Matrix :  \n', metrics.confusion_matrix(y_test, y_pred))
print('\nAccuracy :  ', metrics.accuracy_score(y_test, y_pred))
print('\nReport :  ', metrics.classification_report(y_test, y_pred))

import matplotlib.pyplot as plt

disp = metrics.plot_confusion_matrix(classifier, x_test, y_test)
disp.figure_.suptitle('Confusion Matrix')
print(f'Confusion Matrix  :  \n{disp.confusion_matrix}')

plt.show()