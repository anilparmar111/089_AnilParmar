# -*- coding: utf-8 -*-
"""089_Lab4_WeatherEntropy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1auEUfCz_DDX435KkV8zDr3hnawwGciNs

Task 1: Try the algo on Same Whether dataset - OneHotEncoding of features: and Train test Division 75%-25%

---

Importing libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier, export_graphviz, plot_tree

"""Preparing Dataset"""

#Predictor variables
Outlook = ['Rainy', 'Rainy', 'Overcast', 'Sunny', 'Sunny', 'Sunny', 'Overcast',
            'Rainy', 'Rainy', 'Sunny', 'Rainy','Overcast', 'Overcast', 'Sunny']
Temperature = ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool',
                'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild']
Humidity = ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal',
            'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High']
Wind = ['False', 'True', 'False', 'False', 'False', 'True', 'True',
            'False', 'False', 'False', 'True', 'True', 'False', 'True']

#Class Label:
Play = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No',
'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']

"""Digitize dataset using encoding"""

from sklearn.preprocessing import OneHotEncoder, LabelEncoder
X = tuple(zip(Outlook, Temperature, Humidity, Wind))
print(X)

encoded_x = OneHotEncoder().fit_transform(X).toarray()
print(encoded_x)

le = LabelEncoder()
encoded_y = le.fit_transform(Play)

"""Merge different features to prepare dataset"""

#Create a tuples of different values
print('Features  :  \n')
for pair in encoded_x:
  print(pair)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(encoded_x, encoded_y, test_size = 0.25, random_state = 89)
print(x_train)

"""train 'Create and train DecisionTreeClassifier'"""

from sklearn import metrics

dtc_obj = DecisionTreeClassifier(criterion = 'entropy')
dtc_obj.fit(x_train, y_train)
y_pred = dtc_obj.predict(x_test)

print('Accuracy  :  ', metrics.accuracy_score(y_test, y_pred))

"""Predict output for new data"""

print(x_test)

print('\ny predicted  :  ', y_pred)
print(f'Actual y test  :  {y_test}')

from sklearn.metrics import confusion_matrix

confusion_matrix(y_test, y_pred)

from sklearn.metrics import precision_score, recall_score

print(metrics.classification_report(y_test, y_pred, zero_division = 0))

disp = metrics.plot_confusion_matrix(dtc_obj, x_test, y_test)
disp.figure_.suptitle('Confusion Matrix')
print(f'Confusion Matrix  :  \n{disp.confusion_matrix}')

plt.show()

from subprocess import call
export_graphviz(dtc_obj, out_file='tree_entropy.dot', 
                feature_names = ['Outlook2', 'Outlook1', 'Outlook0', 'Temperature2', 'Temperature1', 'Temperature0', 'Humidity1', 'Humidity0', 'Wind1', 'Wind0'], 
                class_names = ['do_not_play', 'play'], 
                filled = True)

#convert to png
call(['dot', '-Tpng', 'tree_entropy.dot', '-o', 'tree_entropy.png', '-Gdpi=600'])

# Display in python
plt.figure(figsize = (14, 18))
plt.imshow(plt.imread('tree_entropy.png'))
plt.axis('off');
plt.show();